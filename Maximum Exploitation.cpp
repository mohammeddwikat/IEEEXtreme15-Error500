#include <bits/stdc++.h>
using namespace std;

int main (){\

  ios_base::sync_with_stdio(false);
  cin.tie(NULL);

  int n, m, h, w;
  cin >> n >> m >> h >> w;  
  int a[n][m];
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      cin >> a[i][j];
    }
  }
  vector<vector<int>> psa(n, vector<int>(m));
  psa[0][0] = a[0][0];

  for (int i = 1; i < m; i++)
      psa[0][i] = psa[0][i - 1] + a[0][i];
  for (int i = 1; i < n; i++)
      psa[i][0] = psa[i - 1][0] + a[i][0];

  for (int i = 1; i < n; i++) {
      for (int j = 1; j < m; j++)
          psa[i][j] = psa[i - 1][j] + psa[i][j - 1]
                      - psa[i - 1][j - 1] + a[i][j];
  }

  auto query = [&] (int i, int j) {
    return ~i && ~j ? psa[i][j] : 0;
  };
  auto sum = [&] (int x, int y, int x2, int y2) {
    return x2 < n && y2 < m ? query(x2, y2) - query(x2, y-1) - query(x-1, y2) + query(x-1, y-1) : 0;
  };
  int ans = 0;
  vector<int> row(n + 1), col(m + 1);
  for (int i = n - 1; ~i; --i) {
    row[i] = row[i + 1];
    for (int j = 0; j < m; ++j) {
      row[i] = max(row[i], sum(i, j, i + h - 1, j + w - 1));
      row[i] = max(row[i], sum(i, j, i + w - 1, j + h - 1));
    }
  }
  for (int j = m - 1; ~j; --j) {
    col[j] = col[j + 1];
    for (int i = 0; i < n; ++i) {
      col[j] = max(col[j], sum(i, j, i + h - 1, j + w - 1));
      col[j] = max(col[j], sum(i, j, i + w - 1, j + h - 1));
    }
  }
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      int x = i + h - 1, y = j + w - 1;
      if (x < n && y < m) {
        ans = max(ans, sum(i, j, x, y) + max(row[x + 1], col[y + 1]));
      }
      x = i + w - 1, y = j + h - 1;
      if (x < n && y < m) {
        ans = max(ans, sum(i, j, x, y) + max(row[x + 1], col[y + 1]));
      }
    }
  }
  cout << ans;

  return 0;
}